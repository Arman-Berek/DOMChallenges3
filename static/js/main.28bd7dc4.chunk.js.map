{"version":3,"sources":["components/Cell.js","components/row.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","handleClick","setState","color","handleMouseOver","drawing","console","log","state","this","class","onClick","onMouseOver","Component","AddRow","cells","i","columns","push","Table","rows","App","updateColor","event","target","value","incrementRow","rowCount","incrementColumn","columnCount","decrementRow","decrementColumn","newDrawing","className","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28bd7dc4.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Cell.css'\n\nclass Cell extends Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      color: 'gray'\n    };\n  }\n\n  handleClick = () => {\n    this.setState({\n      color: this.props.color\n    });\n  }\n\n  handleMouseOver = () => {\n    if (this.props.drawing) {\n      this.setState({\n        color: this.props.color\n      })\n      console.log('mouseovered');\n    }\n  }\n\n  render(){\n    const color = this.props.color\n      return(\n        <td class={this.state.color} onClick={this.handleClick} onMouseOver={this.handleMouseOver}/>\n      );\n  }\n}\n\nexport default Cell;\n","import React,{Component} from 'react';\nimport Cell from \"./Cell.js\";\n\nclass AddRow extends Component{\n    constructor(props){\n        super(props);\n\n    }\n    render(){\n      var cells = [];\n      for (var i = 0; i < this.props.columns; i++){\n        cells.push(<Cell color={this.props.color} drawing={this.props.drawing}/>);\n      }\n      return(\n        <tr> {cells} </tr>\n      );\n    }\n}\nexport default AddRow;\n","import React, { Component } from 'react';\nimport Row from './row';\nimport Cell from './Cell'\n\nclass Table extends Component {\n  constructor(props){\n    super(props);\n  }\n\n\n  render(){\n    var rows = [];\n    for (var i = 0; i < this.props.rows; i++){\n      rows.push(<Row columns={this.props.columns} color={this.props.color} drawing={this.props.drawing}/>);\n    }\n    return(\n      <div>\n        <table> {rows} </table>\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","import React, {Component} from 'react';\nimport './App.css';\n//import AddRow from './components/row'\nimport Table from './components/Table';\n\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      rowCount: 1,\n      columnCount: 1,\n      color: \"white\",\n      drawing: false\n    }\n  }\n\n\n  updateColor = (event) => {\n    this.setState({\n      color: event.target.value\n    })\n  }\n\n  incrementRow = () => {\n    this.setState({\n      rowCount: this.state.rowCount + 1\n    });\n  }\n\n  incrementColumn = () => {\n    this.setState({\n      columnCount: this.state.columnCount + 1\n    });\n  }\n\n  decrementRow = () => {\n    if(this.state.rowCount !== 0){\n      this.setState({\n        rowCount: this.state.rowCount - 1\n      });\n    }\n  }\n\n  decrementColumn = () => {\n    if(this.state.columnCount !== 0){\n      this.setState({\n        columnCount: this.state.columnCount - 1\n      });\n    }\n  }\n\n  handleClick = (event) => {\n    let newDrawing = !this.state.drawing;\n    this.setState({\n      drawing: newDrawing,\n    })\n    console.log('mousedown triggered')\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n          <div className=\"button-background\">\n          <button class=\"inputs\" onClick={this.incrementRow}> Add row </button>\n          <button class=\"inputs\" onClick={this.incrementColumn}> Add column </button>\n          <button class=\"inputs\" onClick={this.incrementRow}> Add row </button>\n          <button class=\"inputs\" onClick={this.incrementColumn}> Add column </button>\n          <button class=\"inputs\" onClick={this.decrementRow}> Remove row </button>\n          <button class=\"inputs\" onClick={this.decrementColumn}> Remove column </button>\n          <select class=\"inputs\" onChange={this.updateColor}>\n            <option value=\"white\"> White </option>\n            <option value=\"black\"> Black </option>\n            <option value=\"blue\"> Blue </option>\n            <option value=\"red\"> Red </option>\n            <option value=\"yellow\"> Yellow </option>\n          </select>\n          \n          <div>\n            Row count: {this.state.rowCount}\n          </div>\n\n          <div>\n            Column count: {this.state.columnCount}\n          </div>\n\n          <div>\n            Selected color: { this.state.color}\n          </div>\n          \n\n          </div>\n        <header className=\"App-header\">\n          {/*\n            Testable button\n             <AddRow rowCount={this.state.rowCount} columnCount={this.state.columnCount} color={this.state.color}></AddRow>\n          */}\n\n          <button class=\"inputs\" onClick={this.handleClick}> Draw </button>\n          <Table rows={this.state.rowCount} columns={this.state.columnCount} color={this.state.color} drawing={this.state.drawing}/>\n\n        </header>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}